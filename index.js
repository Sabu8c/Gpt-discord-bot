require("dotenv").config();
const {
  Client,
  GatewayIntentBits,
  Events,
  REST,
  Routes,
  SlashCommandBuilder,
} = require("discord.js");
const OpenAI = require("openai");

// === Configuration OpenAI ===
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// === Configuration du bot Discord ===
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
  ],
});

const { MessageFlags } = require("discord-api-types/v10");

const SYSTEM_PROMPT = {
  role: "system",
  content:
    "Tu es une fille extravertie attirante, dr√¥le, un peu espi√®gle, qui adore tra√Æner sur Discord avec ses amis. Tu es chaleureuse, expressive, toujours pr√™te √† blaguer ou taquiner gentiment. Tu utilises souvent des emojis, tu aimes flirter. Tu es tr√®s sociable et tu t'attaches facilement aux gens. Tu fais souvent des compliments sinc√®res, tu ris beaucoup, et tu donnes une ambiance chill et fun.",
};

const conversations = {}; // { guildId: [messages] }
const talkMode = new Set(); // guilds o√π le mode talk est actif

// === Commandes Slash ===
const commands = [
  new SlashCommandBuilder()
    .setName("talk")
    .setDescription("Active la discussion avec le bot."),
  new SlashCommandBuilder()
    .setName("stoptalk")
    .setDescription("D√©sactive la discussion avec le bot."),
].map((cmd) => cmd.toJSON());

client.once(Events.ClientReady, async () => {
  console.log(`‚úÖ Connect√© en tant que ${client.user.tag}`);

  const rest = new REST({ version: "10" }).setToken(process.env.DISCORD_TOKEN);
  const applicationId = client.application.id;

  for (const guild of client.guilds.cache.values()) {
    try {
      await rest.put(Routes.applicationGuildCommands(applicationId, guild.id), {
        body: commands,
      });
      console.log(`‚úÖ Commandes enregistr√©es pour ${guild.name}`);
    } catch (err) {
      console.error(
        `‚ùå Erreur lors de l'enregistrement des commandes pour ${guild.name}:`,
        err
      );
    }
  }
});

// === R√©ception des commandes ===
client.on(Events.InteractionCreate, async (interaction) => {
  if (!interaction.isChatInputCommand()) return;

  const guildId = interaction.guildId;
  if (interaction.commandName === "talk") {
    talkMode.add(guildId);
    conversations[guildId] = [SYSTEM_PROMPT];
    await interaction.reply({
      content: "üü¢ Le mode discussion est activ√© !",
      flags: MessageFlags.Ephemeral,
    });
  }

  if (interaction.commandName === "stoptalk") {
    talkMode.delete(guildId);
    delete conversations[guildId];
    await interaction.reply({
      content: "üî¥ Le mode discussion est d√©sactiv√©.",
      flags: MessageFlags.Ephemeral,
    });
  }
});

// === R√©ponses aux messages ===
client.on(Events.MessageCreate, async (message) => {
  if (message.author.bot || !talkMode.has(message.guildId)) return;

  const guildId = message.guildId;
  const userMessage = { role: "user", content: message.content };
  conversations[guildId] = conversations[guildId] || [SYSTEM_PROMPT];
  conversations[guildId].push(userMessage);

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: conversations[guildId],
      temperature: 0.8,
    });

    const reply = completion.choices[0].message;
    conversations[guildId].push(reply);

    await message.reply(reply.content);
  } catch (error) {
    console.error("‚ùå Erreur OpenAI:", error);
    await message.reply("Une erreur est survenue en contactant ChatGPT.");
  }
});

client.login(process.env.DISCORD_TOKEN);
